#!/usr/bin/env python3
"""
Test script for OmniDoc AI API Key Functionality
Tests that API keys are properly passed from frontend to backend
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.services.llm_service import LLMService

def test_api_key_initialization():
    """Test that LLM service can be initialized with API keys"""
    print("üß™ Testing API Key Initialization")
    print("=" * 50)
    
    # Test 1: No API keys (should fall back to environment variables)
    print("\n1. Testing initialization without API keys:")
    try:
        llm_service = LLMService()
        print("‚úÖ LLM service initialized without API keys")
        print(f"   - Available providers: {llm_service.get_available_providers()}")
    except Exception as e:
        print(f"‚ùå Failed to initialize without API keys: {e}")
    
    # Test 2: With API keys
    print("\n2. Testing initialization with API keys:")
    test_api_keys = {
        'openai': 'test-openai-key',
        'gemini': 'test-gemini-key', 
        'claude': 'test-claude-key',
        'local': '/path/to/local/model'
    }
    
    try:
        llm_service = LLMService(test_api_keys)
        print("‚úÖ LLM service initialized with API keys")
        print(f"   - Available providers: {llm_service.get_available_providers()}")
    except Exception as e:
        print(f"‚ùå Failed to initialize with API keys: {e}")
    
    # Test 3: Partial API keys
    print("\n3. Testing initialization with partial API keys:")
    partial_api_keys = {
        'openai': 'test-openai-key',
        'gemini': ''  # Empty key
    }
    
    try:
        llm_service = LLMService(partial_api_keys)
        print("‚úÖ LLM service initialized with partial API keys")
        print(f"   - Available providers: {llm_service.get_available_providers()}")
    except Exception as e:
        print(f"‚ùå Failed to initialize with partial API keys: {e}")

def test_api_key_extraction():
    """Test API key extraction from headers"""
    print("\n\nüß™ Testing API Key Extraction")
    print("=" * 50)
    
    # Simulate FastAPI request headers
    class MockRequest:
        def __init__(self, headers):
            self.headers = headers
        
        def get(self, key, default=''):
            return self.headers.get(key, default)
    
    # Test 1: All API keys present
    print("\n1. Testing extraction with all API keys:")
    headers = {
        'X-OpenAI-Key': 'test-openai-key',
        'X-Gemini-Key': 'test-gemini-key',
        'X-Claude-Key': 'test-claude-key',
        'X-Local-Path': '/path/to/model'
    }
    
    mock_request = MockRequest(headers)
    extracted_keys = {
        'openai': mock_request.get('X-OpenAI-Key', ''),
        'gemini': mock_request.get('X-Gemini-Key', ''),
        'claude': mock_request.get('X-Claude-Key', ''),
        'local': mock_request.get('X-Local-Path', '')
    }
    
    print(f"‚úÖ Extracted keys: {extracted_keys}")
    
    # Test 2: Missing API keys
    print("\n2. Testing extraction with missing API keys:")
    headers_partial = {
        'X-OpenAI-Key': 'test-openai-key',
        'X-Claude-Key': 'test-claude-key'
    }
    
    mock_request_partial = MockRequest(headers_partial)
    extracted_keys_partial = {
        'openai': mock_request_partial.get('X-OpenAI-Key', ''),
        'gemini': mock_request_partial.get('X-Gemini-Key', ''),
        'claude': mock_request_partial.get('X-Claude-Key', ''),
        'local': mock_request_partial.get('X-Local-Path', '')
    }
    
    print(f"‚úÖ Extracted partial keys: {extracted_keys_partial}")
    
    # Test 3: No API keys
    print("\n3. Testing extraction with no API keys:")
    headers_empty = {}
    
    mock_request_empty = MockRequest(headers_empty)
    extracted_keys_empty = {
        'openai': mock_request_empty.get('X-OpenAI-Key', ''),
        'gemini': mock_request_empty.get('X-Gemini-Key', ''),
        'claude': mock_request_empty.get('X-Claude-Key', ''),
        'local': mock_request_empty.get('X-Local-Path', '')
    }
    
    print(f"‚úÖ Extracted empty keys: {extracted_keys_empty}")

def test_frontend_integration():
    """Test frontend API key integration"""
    print("\n\nüß™ Testing Frontend Integration")
    print("=" * 50)
    
    # Simulate frontend API keys
    frontend_api_keys = {
        'openai': 'sk-test-openai-key',
        'gemini': 'test-gemini-key',
        'claude': 'sk-ant-test-claude-key',
        'local': '/path/to/llama/model.gguf'
    }
    
    print("\n1. Frontend API keys structure:")
    print(f"   - OpenAI: {frontend_api_keys['openai'][:10]}...")
    print(f"   - Gemini: {frontend_api_keys['gemini'][:10]}...")
    print(f"   - Claude: {frontend_api_keys['claude'][:10]}...")
    print(f"   - Local: {frontend_api_keys['local']}")
    
    # Simulate headers that would be sent to backend
    print("\n2. Headers sent to backend:")
    headers = {
        'X-OpenAI-Key': frontend_api_keys['openai'],
        'X-Gemini-Key': frontend_api_keys['gemini'],
        'X-Claude-Key': frontend_api_keys['claude'],
        'X-Local-Path': frontend_api_keys['local']
    }
    
    for key, value in headers.items():
        display_value = value[:10] + "..." if len(value) > 10 else value
        print(f"   - {key}: {display_value}")
    
    # Test LLM service initialization with frontend keys
    print("\n3. Testing LLM service with frontend keys:")
    try:
        llm_service = LLMService(frontend_api_keys)
        providers = llm_service.get_available_providers()
        print(f"‚úÖ LLM service initialized successfully")
        print(f"   - Available providers: {providers}")
        
        if providers:
            print(f"   - First provider: {providers[0]}")
            # Test provider status
            status = llm_service.test_provider(providers[0])
            print(f"   - {providers[0]} status: {status.get('status', 'unknown')}")
        
    except Exception as e:
        print(f"‚ùå Failed to initialize LLM service: {e}")

def main():
    """Run all API key tests"""
    print("üöÄ OmniDoc AI API Key Testing")
    print("=" * 60)
    
    try:
        # Test 1: API Key Initialization
        test_api_key_initialization()
        
        # Test 2: API Key Extraction
        test_api_key_extraction()
        
        # Test 3: Frontend Integration
        test_frontend_integration()
        
        print("\nüéâ All API key tests completed successfully!")
        print("\n‚ú® API Key Flow:")
        print("   ‚úÖ Frontend collects API keys in sidebar")
        print("   ‚úÖ API keys sent via request headers")
        print("   ‚úÖ Backend extracts keys from headers")
        print("   ‚úÖ LLM service initialized with provided keys")
        print("   ‚úÖ Fallback to environment variables if no keys provided")
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 